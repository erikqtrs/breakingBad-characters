{"version":3,"sources":["assets/img/no-image.png","components/Header/Header.jsx","components/BreakingItems/BreakingItems.jsx","components/BreakingGrid/BreakingGrid.jsx","components/Search/Search.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Header","className","BreakingItems","item","src","img","fallbackImage","noImage","initialImage","alt","name","nickname","birthday","occupation","map","oc","status","BreakingGrid","isLoading","items","icon","faSyncAlt","size","spin","key","char_id","Search","getQuery","useState","search","text","setText","type","value","onChange","e","target","placeholder","App","setItems","setIsLoading","query","setQuery","useEffect","a","axios","method","url","result","data","console","log","getData","getQeury","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d305a1f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-image.f98b32ce.png\";","import React, { Fragment } from 'react'\r\nimport './header.scss'\r\nexport const Header = () => {\r\n    return (\r\n        <Fragment>\r\n            <header className=\"text-white text-2xl font-bold text-center mt-5 md:text-4xl\">\r\n                <h1 > <span>Br</span>eaking </h1>\r\n                <h1> <span>Ba</span>d </h1>\r\n            </header>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactImageFallback from 'react-image-fallback';\r\nimport noImage from '../../assets/img/no-image.png';\r\n\r\nexport const BreakingItems = ( { item } ) => {\r\n    return (\r\n        <div className=\"wrap\">\r\n            <div className=\"card\">\r\n                <div className=\"front\">\r\n                    <ReactImageFallback \r\n                        src={item.img}\r\n                        fallbackImage={noImage}\r\n                        initialImage={item.img}\r\n                        alt={item.name}\r\n                        className=\"img\"\r\n                    />\r\n                </div>\r\n                <div className=\"back\">\r\n                    <h2 className=\"text-black font-semibold text-center text-2xl text-blue-100\"> {item.name} </h2>\r\n                    <ul className=\"ml-3 text-base text-white mt-5\">\r\n                        <li> <strong className=\"\">Nickname:</strong>  { item.nickname } </li>\r\n                        <li> <strong className=\"\">Birthday:</strong>  { item.birthday } </li>\r\n                        <li> <strong className=\"\">Occupation:</strong> \r\n                            <ul className=\"list-disc text-white ml-6 text-base\">\r\n                                {\r\n                                    item.occupation.map( oc => {\r\n                                        return( <li> { oc } </li> )\r\n                                        \r\n                                    } )\r\n                                }\r\n                            </ul>\r\n                        </li>\r\n                        <li> <strong className=\"\">Status:</strong> { item.status } </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { BreakingItems } from '../BreakingItems/BreakingItems'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons'\r\nexport const BreakingGrid = ( { isLoading, items } ) => {\r\n    return isLoading ? (\r\n        <div className=\"spinner w-1/3 mt-5 ml-auto mr-auto\">\r\n            <FontAwesomeIcon\r\n                icon={faSyncAlt}\r\n                size=\"4x\"\r\n                className=\"text-green-700 text-center\"\r\n                spin\r\n            />   \r\n        </div>\r\n              \r\n        \r\n    ) : (\r\n        <section className=\"cards mt-12\">\r\n            {\r\n                items.map( item => {\r\n                    return( \r\n                       <BreakingItems \r\n                        key={item.char_id}\r\n                        item={item}\r\n                       />\r\n                    )\r\n                    \r\n                } )\r\n            }\r\n        </section>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport const Search = ( { getQuery } ) => {\r\n\r\n    const [text, setText] = useState({\r\n        search: ''\r\n    })\r\n    const {search} = text;\r\n\r\n    const handleInputChange = (e) => {\r\n        getQuery( e.target.value )\r\n        setText({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"form w-9/12 mt-12 ml-auto mr-auto\">\r\n            <form className=\"w-full\">\r\n                <input\r\n                    className=\"w-full h-8 rounded placeholder-green-800\"\r\n                    type=\"text\"\r\n                    name=\"search\"\r\n                    value={search}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Search Characters Ex: Walter\"\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport { Header } from './components/Header/Header';\nimport { BreakingGrid } from './components/BreakingGrid/BreakingGrid';\nimport { Search } from './components/Search/Search';\n\nimport axios from 'axios';\n\n\nfunction App() {\n\n  const [items, setItems] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [query, setQuery] = useState('')\n\n  const getQeury = ( text ) => {\n    setQuery( text )\n  }\n\n  useEffect( () => {\n    const getData = async () => {\n      const result = await axios({\n        method: 'get',\n        url: `https://www.breakingbadapi.com/api/characters?name=${query}`\n      })\n\n      setItems( result.data );\n      setIsLoading(false);\n      console.log( result.data );\n    }\n\n    getData();\n  }, [query] )\n\n  \n  return (\n    <div className=\"w-11/12 mx-auto\">\n      <Header />\n      <main className=\"w-9/12 mx-auto p-6\">\n        <Search\n          getQuery={ (text) => getQeury(text) }\n        />\n        <BreakingGrid\n          items= {items}\n          isLoading={isLoading}\n        />\n      </main>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/sass/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}